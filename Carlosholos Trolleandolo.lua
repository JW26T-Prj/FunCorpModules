--[[__   __  __   ___          __       _   __     __   ____
/ /  / / / /  / _ |        / /      | | / /   _/_/  / __/
/ /__/ /_/ /  / __ |       / /       | |/ /  _/_/   _\ \
/____/\____/  /_/ |_|      / /        |___/  /_/    /___/
/_/
_____               _  _                          _         _
|_   _|             | || |                        | |       | |
| |   _ __   ___  | || |  ___   __ _  _ __    __| |  ___  | |  ___
| |  | '__| / _ \ | || | / _ \ / _` || '_ \  / _` | / _ \ | | / _ \
| |  | |   | (_) || || ||  __/| (_| || | | || (_| || (_) || || (_) |
\_/  |_|    \___/ |_||_| \___| \__,_||_| |_| \__,_| \___/ |_| \___/
V4.9
[NOTE] Some pieces of code are created by Awesomz#2736 (and something was copied over by Syrius#8114, let's hope it works)
Admin system added by Spectra_phantom#6089
-----------------------------------------------------------------------------------]]
local ADMINISTRADOR = {"Zed#9431"} -- Insert the players that will have the admin flag
local enableRateMaps = false -- Enable map rating
local bulletDelay = 1
local respawn = false
local rt = false
--## [New_Map_system] Made by - Ctmce#0000 ##--
local rMaps = {} --Dont touch this , or else it will break the map system
local mRound = 99 --[[After how much maps to show the same map again. 
If you have aloot of maps  then it's recommended to use (15-20).
the higher the number is , less often you'll see the same map. the lower it is , the more often the same map will show up.
if you put really high number , like 100 , then the map will almost never show up again .]]--
-----------------------------------------------
-----------------------------------------------------------------------------------]]
local ninja = {}
local keyPressed = {}

for name in pairs(tfm.get.room.playerList) do
system.bindMouse(name, true)
keyPressed[name] = {}
for keys, k in pairs({17, 38, 39, 37, 75, 74, 88, 90, 86, 66, 67, 80, 78, 77}) do
    system.bindKeyboard(name, k, true, true)
end
system.bindKeyboard(name, 17, false, true)
end



--[[
Comandos:
!saltar - Para cambiar de mapa
!puntos  - Para cambiar el puntaje, ej: !puntos team1 5
!np @codigo - Para poner cualquier mapa
!pausa - Para pausar el juego
!team - Para asignar jugadores a un equipo, ej: !team1 Trolleandolo
!d NUMERO - Asigna el puntaje para ganar, ej: !d 20
!añadir team nick - Añade un jugador a el equipo especificado, ej: !añadir team4 Trolleandolo
!reset - Resetea el juego
!quitar NOMBRE - saca a un jugador del juego
!puntaje - para ver el puntaje [SOLO EN MODO DEATHMATCH]
!k [playerName] - kills player
!mapcode - shows map code
!admin [playerName] - set player as admin or remove their admin flag
--------------------------------------------------------------------
]]
-----------------------------------------------------------------------------------
local WINS = 15 -- Puntaje para ganar.
------------------------------------------------------------------------------------
--[[
MEJORAS DE LA VERSIÓN
[BOTÓN REVANCHA EN DEATHMATCH Y TEAMS]
[SE QUITÓ UN BUG]
[SE AÑADIERON MAPAS DE BOOTCAMP]
[SE REDUJERON LAS PROBABILIDADES DE BUG]
[SE AÑADIÓ MODO 2 TEAMS AL AZAR]
]]
math.randomseed(os.time())
system.disableChatCommandDisplay("k")
system.disableChatCommandDisplay("conj", true)
 
system.disableChatCommandDisplay("np", true)
system.disableChatCommandDisplay("pause", true)
system.disableChatCommandDisplay("saltar", true)
system.disableChatCommandDisplay("s", true)
system.disableChatCommandDisplay("puntaje", true)
system.disableChatCommandDisplay("mapcode",true)
system.disableChatCommandDisplay("antleve", true);
system.disableChatCommandDisplay("admin",true)
system.disableChatCommandDisplay(nil, true);
tfm.exec.disablePhysicalConsumables()
tfm.exec.disableAutoShaman()
tfm.exec.disableAutoNewGame()
tfm.exec.disableAutoTimeLeft()
system.disableChatCommandDisplay()
tfm.exec.disableAutoScore(true)
tfm.exec.disableAfkDeath(true)

local ban = {}
local banPurgeDone = false
local playersAllowedToConj = {}
local playerData = {}

--## [New_Map_system] Made by - Ctmce#0000 ##--
local rMaps = {} --Dont touch this , or else it will break the map system
local mRound = 15 --[[ If you have aloot of maps  then it's recommended to use (15-20).
the higher the number is , less often you'll see the same map. the lower it is , the more often the same map will show up.
if you put really high number , like 100 , then the map will almost never show up again .]]--
-----------------------------------------------

--[[Map system]]

local ratedMapsData = {}
local mapToRate = "@0"
local teams = {
    [1] = {},
    [2] = {},
    [3] = {},
    [4] = {},
}
local points = {
    [1] = 0,
    [2] = 0,
    [3] = 0,
    [4] = 0,
}
local equipos = {}
local puntos = {}
local modob = "racing"
local modo = "bootcamp"
local modo2 = "Deathmatch"
local modo2b = "normal"
local tiempo = 60
tonumber(tiempo)
local isfirst = false
local gameRunning = false
local winTime = false
local playersInGame = {}
local distanciax = 30
local distanciay = 80
local textarealugar = 300
local textareaid = 0
local mapasmix = {3046622,994090,987795,979402,979042,978916,996338,977015,957484,956669,955084,952979,952958,946290,933324,928596,1308625,4593667,1604646,3849909,5861307,3789713,7755092,3702544,7710964,7273476,1122158,2169032,7710967,7710972,1114578,1347551,5099663,6761379,7699321,7699308,2053480,5886401,1716017,3051833,6099304,3002720,1983899,1415214,2458906,475402,963658,5682829,336255,6110457,2194112,2348837,5854095,600830,1593380,2465291,3043609,2099718,2151826,3792605,2136212,4224284,3606930,2698382,3811514,1808948,2989096,2833898,5461794,1810151,2426196,2734326,3729856,1922275,3555798,2955047,397311,5421762,5459409,5771925,6383899,3098930,1555120,1911955,804619,3662791,2714469,3684474,2222219,1592556,1975588,3733183,2897344,2816033,1530736,5102095,5103069,5096858,5103286,5103299,5103684,5104074,5104328,5104587,6416297,7693124,7703362,7709014,7709524,7695067,7696098,4290900,6763500,5588883,1531521,7684897,7703436,7709082,7711315,7713265,7713465,7719312,7114406,7125532,7131498,7719320,4933333,3712466,1421520,5085930,3475709,7728551,7728553,7728554,7028708,7728557,7728559,7728561,7728563,7728564,7728565,2465159,1795230,3807823,5734817,5482355,3744443,551001,551003,5042309,4459147,769791,1320200,1503940,3073162,3698286,5886620,1749254,1871912,1784108,1609088,6061170,1003963,3695931,6496933,2432342,3336309,2123561,2925655,818675,1229621,3720543,3006942,965404,3457522,2729030,2427285,2582106,6224102,2211932,3743184,5100370,2305839,496973,2135750,2887090,3572718,3713314,2030209,2382163,2988394,2988394,5802880,3820109,5492111,6348717,5208352,6798947,5397241,4006346,4974967,2228042,3752246,3084900,1679431,1889107,3890459,3912906,1599083,1783494,1765416,4154680,6332412,7132853,3243319,6378165,3859455,3859440,3859448,3576676,3020612,7082089,535703,3637586,2906379,1445784,7209754,3029793,2602882,3814326,3227019,3499994,1922136,3064499,3230842,2015865,1945426,1825683,5474771,949404,1555649,3897314,1576962,1740569,4253476,308290,1509488,5339492,7007332,7088744,7616536,5826042,6932832,7587074,7584811,5196705,7596427,523599,6968005,7632000,7531926,6817839,4986806,6727975,6406185,7618651,7587169,7586837,6497633,7624261,7620850,7620557,7547550,7644508,7644506,924611,335672,4551051,5363604,5387456,1848021,7715877,295786,7715878,6354668,7715880,7715889,7715892,972736,7715893,7588081,3639993,1124089,1553365,2464770,958752,5246780,3684576,2978696,1398686,2840285,6415298,3664938,6097465,7473176,2499754,2971518,7553051,1448994,3775529,7090691,3769557,2580890,5654635,3515792,1354086,1607271,2864941,3758080,7586891,2928937,1479391,6117137,1432892,2530165,2501960,1725977,7638522,3643410,2796550,1476546,1077820,4984086,2358318,3875982,2232543,3029569,1703288,5667629,2179111,3848392,596206,2676504,2169032,1637869,7548567,1931371,2962689,4986791,1360399,7072684,5182823,1837351,1769303,3641438,346677,346677,346677,346677,928304,1654457,1987288,5532425,1280922,4706955,1354626,4591899,1273489,7199616,3699034,7604453,2092290,2250327,1611752,1665929,3686809,444948,1724476,3343865,1492000,4068702,4285551,1567583,3699501,5869140,2972854,3711328,1925618,2224069,3866569,3626395,2372055,2937392,2412906,3742961,2730450,4903690,3489293,2075791,2081737,3591676,3985587,2857172,6168975,6027895,1182462,1667979,2883221,920803,411975,1207484,1454226,2415010,3716679,6359335,3464602,6925000,1990566,2459054,4576716,2784397,2455667,5432981,2172624,4299202,763383,2154770,914035,1454226,1411495,3640933,2588439,2649598,3655567,463809,3422535,2951560,2981785,3675438,2462581,2667977,2763731,551113,1617254,3757248,3254479,1147674,5719188,3705060,1040912,370506,3684002,6620001,3880626,2072042,3647084,3828207,3537123,3618931,3592058,5194293,3211247,3669926,3731180,3175085,3988643,2703498,1603790,1604481,2240763,4961039,2686675,1952016,1322970,3837507,3651818,237116,410761,3069439,3774885,5840365,3731427,5725959,1693284,6380261,377836,7126782,3514399,1819063,1553514,5512348,5227442,5717626,2876539,5748062,2074751,2050140,2550766,2206884,3206914,1805487,4097284,3022119,3632876,3520474,2643649,7218822,4146225,3984929,1667881,418647,1664955,558545,5031716,2633481,1384334,2984889,3590715,313671,5289725,4252578,4603458,2267529,1609914,3824465,4846540,3084119,7605580,7605581,7605582,7605583,7605585,7605587,7605588,7605589,7605590,7605591,7605593,7605594,7605595,7605596,7605597,7605599,7605600,7605601,4701213,2928081,4008546,4807572,1878987,3545845,4428798,6024473,1013418,3779727,6483218,4739767,2572437,4611726,3639522,2952445,1815959,6217685,6817815,1631144,2716790,2479159,7584196,2892732,3329644,6766161,7544571,3569727,5436814,5152657,2865540,3747030,763507,502367,1569338,6847397,1664206,523063,1713599,1053435,4200758,1700392,615060,7566415,297935,4425570,4354774,6052422,1621816,896160,3514470,1460803,5387368,3103524,4870394,3593977,5896865,2747553,447416,1937367,1649390,3255515,3030719,1978537,974974,1160104,2519609,5438063,1698518,1948214,5509365,5638527,2479857,2085706,4705554,2118873,5086697,5269551,1677684,5788578,3896968,3387926,1980068,2835893,7593093,5813786,1931832,3595417,1647718,2629657,3841128,3799998,253185,1485715,3586929,1891070,6469397,2593776,4322359,2223087,3678963,5404111,928932,1374761,1264371,3679928,2046467,6225379,5171444,5167694,5157983,5423355,7571698,2568734,5265717,1132547,734801,1165108,6096329,3728829,5043345,3658285,3589964,3573613,3557368,7445961,2163742,3387826,1076550,5069883,1621292,3966524,1451655,7596558,7596559,7596560,7596562,7596691,7596695,7596696,2088004,7596699,4889205,916783,2282320,5206625,1724476,7467156,1746469,3979164,3864964,5882565,3976691,7598797,7598799,7598801,7598802,3455263,7598804,7598806,7598807,1414884,7598808,7598809,7598810,7598812,2976790,5612226,7598813,7598816,2905077,7598817,5521190,7598819,7505479,7598821,1567583,3029253,3014556,4350189,3727215,6852010,2971901,2857239,556968,1985203,2543526,776388,2586833,376396,1916839,1464805,2634571,2960638,6901124,1399931,2609575,7589970,7589970,7589971,7589972,7589973,7589974,7589976,7589978,7589979,4848465,3901079,6205585,7589982,7589984,7589985,7589986,7589987,7589988,1585804,3919924,4067778,2340745,3533379,2969546,5576533,2510021,1890436,1980004,5845176,7590090,5853829,2571202,3543036,2877339,1846397,7140150,5629504,3704320,2223149,3185643,6618462,1529469,2530165,1891368,5941925,3118877,1549214,1730735,802902,2663439,1663236,3430946,1382959,2326215,5571331,2002651,1553455,2479609,1352254,1742587,3659613,2431609,1536702,6203635,650830,2798632,5460163,4883143,2149868,5510498,7579758,3808106,2893867,2032283,2631904,1841509,2414847,3357194,6036604,2174969,2703901,3694470,3839094,5537746,728208,4160966,1931520,3835106,2805936,3018949,3298590,4273592,3673153,1886819,3120127,6547114,5745602,6629374,6480535,5784632,3305227,2749185,3100074,3764961,421611,3166741,5718531,1641988,3072114,3718648,3696531,4995458,1489352,5332812,3990225,2624923,2031223,1868778,3913081,1149838,2330762,3742469,846554,6304005,5582180,2156077,6507889,304475,3745615,3561381,3132933,3697800,3149627,5302706,4106370,2793053,1860112,2340145,1289525,7404080,1661675,1324386,1179152,1740676,2109767,708823,5343022,420771,2667812,2733535,3699329,1770511,2656391,1819753,3853276,2480456,1460852,1363261,1425622,385105,3800097,5061445,1994320,4309546,3239127,1286937,2847679,2319181,1881982,5329128,1707180,1055018,1866817,1700898,4148579,2310887,1697320,2874444,2449214,687298,3285999,3696921,5119425,2476398,3604500,5540020,4513718,3921722,5160514,6300073,3197249,1405239,2620598,1428463,1480565,992578,1424798,1780210,2440885,7366567,2698054,7594744,7594746,7594747,7594748,7594749,7594750,7594751,7594752,7594753,7594754,7594756,7594758,7594759,7594763,7594764,7594765,7594766,2420501,7594767,7594769,7594774,4545101,7594776,7594777,7594778,7594779,7594780,7594781,7594782,7594783,7594784,7594785,7594786,7594788,7594789,7594790,2048050,5001366,3277158,2163742,1510818,1313887,5092201,2550414,5771583,5745150,3768800,1203713,2031462,605936,5043256,3684726,4241064,3652112,3797080,1502512,2398459,1686942,1772458,2415314,2581348,2081656,5941814,591201,2025979,1890436,1733434,2575661,3484494,1587693,3654164,5760249,3773397,3617288,2853632,1851969,2960319,2624923,2742266,293407,6133550,4698671,2740472,3676395,3679140,5472351,6777359,1803169,3690316,5538831,116040,5239176,901784,7595741,7595742,7595743,4441552,7595745,876613,7595746,7595748,7595749,7595750,7595751,7595752,7595753,7595754,7595755,7595756,3024291,7595757,3559791,866665,7595759,7595760,7595761,7595763,7595764,7116999,7595765,7595766,7595767,7595768,7595770,7595771,7595772,7595773,7595774,1867649,1844404,2319756,1921105,235863,481141,3710878,3745348,1551411,599339,1132841,3186738,1445806,2950316,1999433,7588217,7588218,7588221,7588222,7588224,7588225,7588229,7588230,7588233,7588235,7588238,3517551,7588239,7588240,7588243,7588244,7588245,7588246,7588249,7588253,7588256,7588257,7586454,4564380,1709079,1463576,2473784,1990585,4225415,3534755,1529753,6568183,3964168,4465679,5830619,1636847,3084024,2978758,2207242,2828225,1430257,1611752,5083570,1503669,3658619,3712466,7301894,912490,3637190,3690789,1469911,5086164,3702120,721910,2093306,3668632,3891989,3865829,1807161,2681705,2013606,1220037,7586576,7586577,7586578,7586579,7586581,7586582,7586583,7586584,7586585,7586587,7586589,7586590,7586591,7586592,7586593,7586594,7586595,3610554,7586596,7586597,7586598,7586600,7586601,7586602,3089485,7586603,2163742,1053539,1721251,5478906,6205970,3156745,4348352,3241835,3326440,1569481,3636571,2986279,1643776,3837289,5431781,6752042,2418253,2416543,3358124,411687,1712441,193187,2877165,1608238,1819776,3480598,2626804,3581991,3898426,2481042,3181008,4182202,5611222,2100416,2816064,2543452,3932685,5105940,389768,5395761,3697752,1967351,6830525,3896856,2705995,3489333,5484871,2501538,5313078,1118306,4818087,3428934,3757278,5523199,1944889,1519256,2894515,3150084,1468561,5499302,4900101,3570936,7585875,7585876,7585877,7585879,7585888,7585889,7585892,7585893,7585896,7585897,7585898,7585899,7585900,3520878,7585901,7585903,7585904,7585906,193187,7585907,7585908,7585911,7585912,6733104,521756,2785571,7243656,2504433,268985,4697282,2857448,2457864,1387242,2983538,1746823,6872493,3851834,3143538,468972,5814223,3841284,3630979,3216342,2774931,1040236,677608,895971,3564891,3676523,2159625,3697872,6121939,3806103,3946237,5539855,2185227,2445318,2973285,6203577,1606904,3190335,6103100,1590935,520308,2154166,6202855.1761416,2767238,3539557,531393,1537810,7521287,3705380,5000056,2962094,3549002,7259687,1699725,1451996,1610004,1338610,296361,1548446,3023500,6304005,4380537,7074890,3520951,1652941,3755613,4009415,401705,2237427,6201167,2784397,5255657,533946,3015348,4234518,3387926,1808440,852036,4271527,3661778,1580042,2880295,1616692,2413286,3988481,2583328,3221567,1453388,2972456,5017009,3663231,3491935,3478705,1891199,6140452,6498002,1706451,3777243,1691451,3685069,1964070,5070340,1972853,2178289,1418353,3849085,4298073,2211530,1845355,6109280,2035594,7583983,1999538,733188,7583985,1407496,885790,3717973,3906543,5948551,5976869,2452276,6070666,1487531,3026533,1975642,6714712,3217173,542206,2913914,5656820,1769722,1780844,7227763,7584185,7584186,7584187,7584189,7584190,2668543,7584191,7584192,7584193,7584194,7584195,5707667,7584197,7584198,7584201,7584202,7584204,1840109,3035430,3641597,5723425,716454,1748936,2698747,2024218,3204335,2833702,505805,2048050,3696199,3089894,1828315,3069262,3750609,2731707,3729330,1794589,2017255,7491603,4640565,4055165,6840620,6965421,3164541,6965421,3685464,2054943,365315,5813469,1033390,7054190,1124859,3641873,3661173,1473836,2431444,3503305,5737012,2423265,1705725,1949215,1589402,2476398,5710452,5919033,2879902,3497217,6571252,3433197,6104868,6726790,1380450,2558489,3721136,1650589,3647084,3624946,6557245,3912825,5166234,3029129,1477421,1799351,1737233,2038475,1446502,2012857,1958837,5432386,6042206,243962,5070428,2198167,2749103,1369255,2557752,2371914,5188867,3731931,3238202,1439286,5176687,1446952,1142162,3328963,721229,6050971,3531249,3756184,1532940,6660659,3184847,1971197,3832344,5293621,2239095,7581422,3379444,7581425,5402499,7581426,7581430,7581431,7581433,857969,7090005,7581435,7581437,7581441,4702472,7581442,7581443,7581444,7581445,7581446,7581447,7581448,7581449,7581450,5213306,7581451,7560419,7581453,7581456,7581457,7581458,5746152,7227007,4864351,3060011,5200910,3257930,2398407,1544861,3144670,1644081,2006666,1580374,5796038,2815472,5681686,3100650,2692126,1741073,2102814,3710363,1402257,2665959,3615479,2808418,5756977,370831,2129581,3684931,2716169,1609642,3702443,4359062,6516286,5524577,2274853,3831715,3478750,554595,3681488,3429348,808903,1815144,1997567,2984611,4966199,2479767,3350174,2977670,5758757,1776462,6032284,1494544,4211491,1819646,2787653,2915889,4723257,1284922,3402209,5544351,5096786,1421488,1319953,2151630,3090268,3728775,2696883,6975901,1682563,1055301,4089620,5493813,3388889,3873919,3621510,2040327,7563886,7563888,1703062,1770702,2049829,1031162,1940633,1477077,3485112,3650626,2240014,3000880,4833628,1568124,2599257,2457551,3963989,7574385,1923304,319426,2064891,5952334,5854437,2962820,3909564,3110731,3746970,3671792,630767,3960389,4625712,1473876,7088745,6647453,3236460,1391129,3894282,1664227,2816435,5838710,3285994,5017387,2306483,5568574,2537299,1183614,6255741,4143293,1357913,768679,312415,345232,541888,883644,541088,415457,527634,5327280,3361351,1792257,2797861,2954979,3881931,3733964,2320378,7574387,7574388,7574390,7574391,7574392,2882873,2695460,5597023,2098179,7574400,2201219,5736061,1582926,1677763,38286787,1878759,7543645,393067,3067756,3963989,6717825,6731562,6820863,5865143,5746807,278585,1821529,6800839,141355,1220087,2922338,411415,7574383,5604555,6453895,7288042,2011033,1056854,3041398,311316,7514011,2211509,2982818,1566653,2266481,3357603,2802076,454094,1143472,5661746,3042024,4130245,1380341,7574381,7574382,3413565,3755295,3006464,2866340,2428982,3452457,2736710,439982,2713132,6526973,2425058,5489217,5231904,3164976,3783573,2141733,5281388,2624327,2455731,4306045,3318104,4427048,5896853,1642281,3095578,3821686,2247536,524651,3635836,2429975,2982051,1854121,313539,2055462,1357903,3915506,1213682,3569080,1676593,2187555,1998209,2200136,1739798,756388,2543093,5265432,2905532,2479621,7563913,1973197,1349271,5559971,7066091,5520818,2613717,3676771,1278553,3604629,1652907,5804164,1994754,7121654,1672102,3579181,3747997,136372,2918560,2363401,2203543,854252,7002137,2459502,3587695,2053429,697099,734286,566586,3707753,1626985,5784387,1265041,6798468,3772198,4244560,2673219,1695546,2994363,2730612,3100754,886099,3110056,3701884,3350141,3458781,112125,7294527,3099936,2317494,2286884,1620205,1941646,2451539,5462759,1752343,1291046,1767282,1634135,4940660,395638,1982490,1476917,1520050,5046251,7111081,3486777,339688,1817461,2242986,1465794,2925302,1705533,2922706,4836774,3660363,745660,3169468,1520763,3509457,3569617,355391,6648567,862026,2023835,2502370,7193672,1294506,3343007,2226606,3683984,1700134,3292563,7458781,2060440,3777791,3219347,5474,771,6020360,6886256,1585825,4483044,2054433,3823226,2111371,7014627,1416017,1569410,2901923,5597196,3368095,1959434,5120511,3800025,1874309,3903481,6025066,840023,2682348,3699720,2896854,3688479,1502057,1555263,809981,585601,1375127,1596918,360669,2840545,5635682,1846140,2615488,2849336,3201680,1231531,3608639,3146467,5324271,1976484,9789163120589,3680975,5517500,3089475,3192865,447198,5133665,3565552,1662547,2770880,1311245,6149285,6569917,6569917,1002415,562828,3245190,5484232,2459645,3568909,1203580,4082130,2222106,609377,6827736,1605542,5782928,1733405,7073872,2003397,3176790,2704798,17024143193031,3495072,5246769,1886726,3806514,444669,4346701,3637879,1651912,2810301,2483585,6013518,2967201,1712139,1434614,2037858,1486073,796522,1704970,7562539,6006077,2904194,2299901,7379672,3428969,3695243,1646580,4856787,3693603,1695961,573162,1602006,5225660,3904844,4130519,2847085,432838,3367472,1661557,5578142,3848961,556991,5470076,1934684,7423396,3827073,2216672,5925390,2422320,6011897,1684971,5874848,2904364,1826106,1299778,3889066,1651396,2474610,2954389,2912090,1557183,1937029,2507487,1715294,2922372,5463645,1681132,4780988,913716,3545388,2932771,5413653,1845425,7295773,7094153,2493682,2990927,2887564,2677697,408672,5316507,3703101,7094153,2493682,2990927,3632558,2887564,2677697,5316507,3703101,1308009,4770812,5337079,3755004,1415101,5745185,982968,3660773,1308009,4770812,5337079,3121001,247806,2271606,3931104,3725831,3205507,5505571,2668317,2885795,7051723,3732788,6507006,1709842,3412978,4119570,3678477,1576605,7175099,1305918,2924041,530050,1671341,6538336,2590428,3111412,3444188,2745018,4100202,2604892,3778127,2930905,5229169,7201798,1935783,1766070,1934713,3600756,2213804,2767444,2422252,2581588,2008408,3225517,1583004,806374,4743209,2206428,1337908,3639063,5819000,3696099,2222914,2000227,7422917,1883283,1686313,5521222,3089084,2442179,1759304,1747395,6538525,2553999,6982855,3685130,6751808,6099941,4934225,1516378,5805504,675584,470956,2510902,1242503,3749719,2487185,4129854,3526684,5851713,1567499,485685,5331758,3063021,312874,5086885,1334799,2673350,2094529,816937,1984183,3660915,5067745,1836636,2570299,4974043,2958926,1617612,16642067,2324943,1207415,7546911,2818215,4244697,3974286,7165647,3671337,2801423,2510424,1388511,624595,1297286,2436358,6091196,5512914,487571,534127,2815852,6458416,3804033,4933567,5744422,5722902,5470939,5452179,5457991,1640994,2873717,1524883,1845772,3674891,1875155,2464178,1739033,3724024,1791754,4159572,967165,2701754,5567026,2472185,5552462,249043,3889066,1651396,2474610,2954389,2912090,1557183,1937029,2507487,1715294,2922372,5463645,1681132,4780988,913716,3545388,2932771,5413653,3084699,2785576,379257,1860558,4848841,3177975,2873752,2529630,2521006,400020,7543202,7534845,3699951,5905174,1989575,2497300,451053,2184388,1392529,434181,4851652,3721264,2702019,336108,1338400,7463026,1821872,3678098,1974435,6474880,3134012,2177055,1458500,3305645,856005,1595486,5458093,1612392,2460705,6267145,1580571,1538872,5824666,3872292,2604202,1970794,1794494,6914627,3913043,522169,1557181,2889144,1682581,3570595,2952667,3531094,972593,2828325,3718893,625620,1826923,3777243,3162194,2071143,3175833,2822802,6450734,3075720,1552345,400875,3695422,3617908,4999095,868500,3273027,1830647,3001168,839357,143026,6509298,6216983,2866493,1699319,3913043,6043877,2777244,3790887,1597535,5366786,1943658,5967356,4644327,2573869,4886905,5497221,6166360,3757587,1601279,409682,3656856,1880412,5548982,440803,3486898,1469614,1691653,3517982,1971388,1591567,2016029,1915474,1257990,2836295,3495373,1595131,2712714,2038888,2667948,2112482,5898371,2152725,1794645,1766575,3413233,1394393,2752920,5826810,1800219,3236194,5880743,3888975,3239977,1672342,1289969,2634502,5898371,1994578,3974343,3862812,1959522,2695007,1975949,5539548,3817687,1969538,526457,3648898,2497733,3919737,3230126,3112996,1649655,1414281,1419212,1209447,4702472,524427,1578727,4670311,6569858,1900395,5593658,748627,3220216,3036369,1533891,6104868,5208730,3220691,2113571,5692470,1545496,212279,6832768,3411897,5039866,4198229,3220150,5040626,6945400,1580625,3783670,5086760,2954390,4649501,5605098,4316966,3814007,1893227,1570197,3950540,1662866,3720504,124749,1739328,1839751,3267052,3780004,5534969,5493628,2189066,4933333,5000031,2414326,1660312,877064,3650461,1740582,7532482,3694198,2852186,1170709,2872105,1682394,1202364,2153009,4366270,1824797,927167,919407,6814675,7108753,5556574,2818776,2749154,215024,5307145,4186227,5721017,1295391,2514839,5895587,903753,5642148,3886007,7576967,7577628,7577632,7577633,7577634,7577635,7577636,904700,7577637,7577638,7577641,7577645,7577646,7577648,7577649,7577650,7577652,7577654,455254,7577656,3708532,7577659,7577660,7577661,7577662,7577663,2951831,1632286,3133284,2888737,2959380,7316490,2923902,1879135,3817089,3743709,5784317,2196639,3491472,2932823,3556939,4721537,5557000,3707957,4449825,4335108,1650317,2627810,4940330,1197771,2515859,924199,5342184,3178756,6461474,3961089,2434803,4028439,3820443,2753029,3902921,1636847,5146101,1352371,6149586,2280915,1566790,2461560,1811706,1663869,6593705,1356823,6712790,1961069,3510802,3674914,2185637,1714183,5772036,4814426,2011425,5719032,3703405,5208010,120696,1677751,1390504,5058856,3153335,1997462,3603807,41413,2439981,2152273,2837758,2846092,5850864,1155577,3507172,287241,3741419,692902,5316041,5301410,3682607,1753932,3091367,788325,1449159,3366992,916292,6347261,1434657,6102366,1255406,1076556,2798150,1729711,5683203,6837500,1962691,5198233,599132,567368,3950087,4074777,6419244,2916236,4800287,3757673,293239,6536106,809165,3415097,854987,1990729,1476644,3197548,3732761,2670433,2863240,3744754,3042024,1414583,1405201,3900432,5568878,1344308,1827745,3192935,1904605,480826,1254895,3641472,4882220,1634079,3172505,2256215,562530,1394768,786326,6158708,3352107,5391121,5067010,2468375,3201256,3724600,6286341,3549181,7186722,339068,1979304,5435620,6028061,2708731,5178280,1201818,5699567,3397714,2247468,2719292,2179111,2232637,2368305,1411884,1623902,3824123,5641251,3737863,1900927,3026180,6873059,3324192,4289072,3233197,2023564,3691680,2277265,1757932,2676236,6428562,5881430,7576691,7576693,7576695,2794461,7576709,1395712,5530715,7576703,5444350,2207345,2842087,3572040,2162120,2440783,5130206,2370767,4558726,4060762,3628872,3532285,4675569,2835676,1528880,1383825,7272444,1961891,3079549,2501462,1986742,7545766,5400102,7070700,7100013,3521381,5504146,1976484,2609729,957128,997153,5727892,2380804,1310682,2807482,3101639,3044133,608631,2563142,1156897,3490631,3662992,5452668,4217430,2251303,3057877,1646186,5327503,2493682,6191961,1785252,6340741,2488702,3720570,2810346,4877063,3854293,575662,1907014,3047479,1986742,1716079,2606512,2606512,1612436,1982506,220935,1447073,4069988,5950280,5613707,2720250,1764190,7362662,4327453,1854383,1667570,2956296,1578036,354759,2870581,1462709,3718084,4797932,3337441,5410633,2621030,1837491,2825611,3207688,6101891,1618019,1977256,3936998,264703,3180155,1583081,3577533,1889832,1674133,2395730,1816288,865228,1863285,562845,4140811,3522511,4675782,2049637,885029,4888891,3555164,1112380,1707338,3141100,2815451,1346358,1485567,1929667,3411709,545781,3931308,2376400,2074773,4350786,5696509,1212123,3675423,870306,369681,3911642,732670,65153223208273,1947104,2861616,7146696,5727966,5544344,2200571,1654575,2870129,2438149,1783803,4726846,566405,5521249,2964283,1718606,2931383,6068515,356909,3387580,3662963,1390843,3380309,2273250,1463033,5696927,3604144,1995181,2223354,621792,4298881,2389991,3018399,1738402,4216313,1588182,1509640,3475709,2732012,3786946,5444310,2740735,3678170,1760310,2760069,2136431,4414133,2661522,2298033,3693685,2041416,2993613,4901435,2629615,6954201,1481171,2857562,478496,3487949,3046275,1961336,1919727,5000014,2129630,7205609,1728908,446226,1462790,1840202,2094275,2889323,2534715,3685884,2578386,1396216,2598706,2455062,1924872,2824021,3600181,3709369,346069,1824086,1697385,3066506,5749982,4729716,1283844,561385,3012923,3382379,2926504,1587344,7710976,7710974,3616380,2639492,6144588,3120269,1862787,3751081,5142219,5530715,7713707,7713709,7565156,7713713,7713719,4999998,745226,7713723,7713733,7713738,7713739,3318990,2999552,3590209,1551462,7713782,7713784,7713787,7713801,3610719,378386,6065782,3326923,3702572,7713808,5618430,7713810,7713814,2813619,7710960,7259735,7713830,772028,3832217,4002811,1885199,2961748,7714393,7714399,7714405,7714410,1880049,271601,7714427,507651,3586875,3167703,1500680,2864069,5869453,4243141,4017126,1622123,2890988,3547231,1526625,5822342}
local mapasbootcamp = {"#3", "#13"}
local mapasracing = {3611885,1428436,3065912,341116,1229246,3347209,4612295,1222899,5045922,392913,407536,3737576,3683201,1556661,352885,494706,1051378,391868,3684229,264348,5712914,979179,972616,838670,829657,849224,824082,789128,4148332,1980775,148424,263624,1702169,1311059,3029580,1851968,1252122,3556405,225017,6077025,689140,398041,389582,2138401,960547,3801780,7537602,386029,393675,1416040,2700958,1926831,378826,193588,441598,1393405,425771,7657769,5242039,7015533,4469627,244006,6087539,475790,3834905,177236,372970,299503,195720,7552728,499684,3721990,4089698,419374,1751944,792062,5766011,6370537,3267620,1632746,363411,367520,4323335,3549484,1450554,1208798,2047177,564033,1693705,425600,2141379,2453022,508796,448281,247818,387180,337581,508451,3994471,1542618,6103361,645288,1471124,414460,6305122,7586391,444830,2048474,197219,4834093,455167,3683393,4038817,348479,1509474,7276156,206810,2577060,7437311,6152426,3272722,360365,1015582,323085,313245,2464807,1956555,3683600,308992,345943,2840770,441376,646800,7295261,379326,201442,5997203,7236029,401778,4379212,533705,2683170,616433,5382687,1628732,398011,3690578,5249500,1591471,5557858,6070592,3175920,407495,245223,3685382,419735,407294,5886096,2868414,114122,6467947,1851568,319524,3595900,1359797,117548,2372538,414899,2894072,344952,2068543,237281,1255130,1673174,5591545,15812,418196,240544,248098,3556489,339643,2098621,332290,1924905,211565,410608,423062,3669435,120152,4666540,1555862,418337,3213562,235651,3652003,405955,199219,217900,3444803,465205,1728943,763371,316289,158128,905496,2287914,381043,3901403,2588032,4551993,616373,500074,252759,277687,191716,3696662,496091,4853690,428517,3008155,237321,3985806,3575034,261959,180274,212542,499687,278506,5886096,345290,339418,3705931,5477522,5710586,7462416,6547670,217881,418323,6041399,7502635,3818249,262212,1445160,982242,7150371,5452432,239826,4088129,627609,4946442,2645615,362549,5045485,429262,4394100,156847,180509,237269,155168,1346440,4344186,514510,3684455,2953315,5545443,317696,226069,2262476,5029395,2883986,416142,166705,112790,379745,580031,345312,4469588,152299,3684784,1449069,1665249,5886041,529844,1954369,2214661,646968,4273207,163682,349984,7099053,3691609,4734427,120152,344865,4681759,379550,263163,235501,227851,2185089,2989266,339896,1778687,1987990,3575108,4091580,2030343,4174318,1142116,408978,283526,3702767,1856349,459349,381305,3685352,1372941,274321,3518418,658464,445219,7591376,2134537,523046,418265,123216,1405496,1525272,2571671,3603802,611320,332210,5747655,996947,5488573,5630711,6414689,4836483,3691622,7241490,2778863,732880,229835,410736,1398732,6351269,397296,586688,6070140,6076351,3575216,499109,1923785,3778389,322771,262144,3821104,296396,373511,405497,339643,1506007,223810,3970909,420806,260338,208914,363822,356722,233230,3584275,265221,645288,2417713,184110,6263285,2113318,7508888,372970,6079960,620996,538116,759128,381287,1716949,1646120,282434,2796001,1453667,2089069,6563851,2582610,237744,6077025,3778128,430219,813156,117548,1372941,3123384,2522826,1538895,7424218,1483155,5349806,3801780,532300,1689382,5382692,321339,6114281,6665146,400666,563183,208162,4469627,1611631,1242669,1951856,5044309,3847244,1587904,1311059,241295,246973,150692,282694,400866,6172897,7164129,1250021,7444443,1373748,445133,6571685,6149243,3967150,1371239,365464,1051384,201323,6835194,4489653,1597594,6112855,1976007,3408247,406266,147436,1694602,1632541,6292737,5378798,3468601,425030,545493,247815,1513407,3984750,5592108,292348,2166693,405339,1613550,2816067,396725,330590,300055,210188,1310092,422361,4234556,3574927,391693,1661852,209708,3517347,6087537,6612138,2538131,670226,5624841,477370,5436200,3579335,6629634,4870958,3636268,1639996,1623300,1703617,3688783,5699298,7300307,252806,355676,318813,371076,5349806,407746,2369254,424795,2991507,759128,7295261,4945098,1253523,3611702,2564883,6087539,556253,6076351,385203,181312,407457,6520153,379326,372970,6730473,406486,475151,7026132,352381,1651658,5628991,4035194,3603809,418658,5249500,440676,1768347,2347666,1256845,4993931,431887,1195842,3799951,237278,1405249,180255,3727755,425349,397501,327254,4581354,4221819,1539791,185774,136966,1327182,233398,420956,325172,387638,4102732,1952851,323366,229830,1378209,537776,5519925,596626,4778991,3972690,255893,5087373,7653410,412752,3680180,7508884,370444,484992,3680221,3683520,667920,294943,6120147,266704,190026,1338000,211528,505109,749102,594049,195720,3120368,3154,289068,470727,317779,198549,528428,1341396,407230,156685,3683294,2176620,228462,2372538,191753,3909339,426638,333277,3575425,2580114,216439,405679,398011292614,4412890,354878,1857829,2725924,355957,1425101,7062105,1504586,1573997,6069526,1999967,3644272,175205,1602654,3611885,846805,4685111,1003924,5591545,976786,4775829,317754,294522,327130,445167,2682985,4174320,3700155,571144,3746280,3574927,3537419,5590554,744038,610137,316289,316289,3575108,234502,1425101,412316,1019378,536235,4911122,1621611,4915220} local maps = mapasracing
local mapasAntLeve = {} -- PUT ANTI-LEVE MAPS HERE
local mapasburlas = {} -- burlas maps here
 
local equipoc= {}
local colors = {
    [1] = "e54427",
    [2] = "0a98db",
    [3] = "00ff00",
    [4] = "ffff00",
}
local queue = {}
local nteam = 1
local azar = {}
local posicion = {}
local modoazar = ""
local numeroposicion = 1
local totales = 0
local totales2 = 0
local jugando = {}
local totaljugando = 1
local jugandoposicion = {}
local last_map = 0

local freezePlayers = { }

local settings = {
	map = "0",
	ammo = 2,
	force = 50,
	recoil = 10,
	maxObjects = 30,
	ammoTicks = 2,
}
 
local choosenPlayer = {}
local objects = {}
local loopCount = 0
local initializedPlayer = false
local bulletDELAY = bulletDelay	
local mapsToAdd = {}


local copyTable = function(l)
	local out = { }
	for k, v in next, l do out[k] = v end
	return out
end

function verifyAdmin(name)
	for i=1,rawlen(ADMINISTRADOR) do
		if ADMINISTRADOR[i] == name then
			return true
		end
	end
end

function displayAdmins()
	admin_string = "";
	for id,name in next,ADMINISTRADOR do
		if id == 1 then
			admin_string = admin_string..name;
		else
			admin_string = admin_string..", "..name;
		end
	end
	if gameRunning == false then
		ui.addTextArea(37, "<p align='center'><V>Administrador(es): "..admin_string, nil, 135, 30, 500, 20, 0x324650, 0x324650, 1, true)
	end
end

function newMap()
	banPurgeDone = false
	if rt then
		return tfm.exec.newGame(last_map)
	end
	if #queue >= 1 then
		tfm.exec.newGame(queue[1])
		last_map = queue[1]
		table.remove(queue,1)
		return
	end
	local r = maps[math.random(#maps)]
	if tableSizeKey(rMaps,r) > 0 then
		for i,v in pairs(rMaps) do
			if rMaps[i] > 0 then
				rMaps[i] = rMaps[i] - 1
			elseif rMaps[i] <= 0 then
				rMaps = table_removeKey(rMaps,i)				
			end
		end
	end
	if rMaps[tostring(r)] then
		newMap()
	else
		rMaps[tostring(r)] = mRound
		tfm.exec.newGame(r)
		last_map = r
	end
	for player, data in pairs(tfm.get.room.playerList) do

        if (not playersInGame[player]) or ban[player] then
            tfm.exec.killPlayer(player)
        end
    end
    
    tfm.exec.setGameTime(tiempo)
    if modo2b == "Deathmatch" then
        borrarScoreDeathmatch()
    end
	
end
function modoalazar()
    ui.addTextArea(38, "", nil, 235, 30, 302, 22, 0x324650, 0x5A7A8B, 1, true)
	admin_string = "";
	displayAdmins()
	ui.addTextArea(2, "", nil, 142, 71, 516, 290, 0x0E1417, 0x0E1417, 1, true)
    ui.addTextArea(4, "", nil, 231, 79, 142, 22, 0x324650, 0x5A7A8B, 1, true)
    ui.addTextArea(5, "<p align='center'><V>Team 1", nil, 232, 80, 140, 20, 0x324650, 0x324650, 1, true)
    ui.addTextArea(6, "", nil, 399, 79, 142, 22, 0x324650, 0x5A7A8B, 1, true)
    ui.addTextArea(7, "<p align='center'><V>Team 2", nil, 400, 80, 140, 20, 0x324650, 0x324650, 1, true)
    for i=8, 11 do
        ui.removeTextArea(i)
    end
    ui.addTextArea(40, "", nil, 231, 120, 140, 200, 0x5A7A8B, 0x5A7A8B, 1, true)
    ui.addTextArea(31, "<p align='center'><font color='#"..colors[1].."'>"..table.concat(teams[1], "\n"), nil, 232, 121, 138, 198, 0x324650, 0x324650, 1, true)
    for i=32, 35 do
        ui.removeTextArea(i)
    end
    ui.addTextArea(36, "", nil, 399, 120, 140, 200, 0x5A7A8B, 0x5A7A8B, 1, true)
    ui.addTextArea(13, "<p align='center'><font color='#"..colors[2].."'>"..table.concat(teams[2], "\n"), nil, 400, 121, 138, 198, 0x324650, 0x324650, 1, true)
    ui.addTextArea(14, "<p align='center'><font color='#5A7A8B'>____         ____</font>", nil, 320, 197, 140, 200, 0, 0, 0, true)
    ui.addTextArea(15, "", nil, 367, 202, 40, 20, 0x5A7A8B, 0x5A7A8B, 1, true)
    ui.addTextArea(16, "<p align='center'><V>VS", nil, 368, 203, 38, 18, 0x324650, 0x324650, 1, true)
	for i,name in next,ADMINISTRADOR do
  	 	ui.addTextArea(42, "", name, 600, 81, 40, 20, 0x5A7A8B, 0x5A7A8B, 1, true)
   		ui.addTextArea(41, "<p align='center'><V><a href='event:salir'>X", name, 601, 82, 38, 18, 0x324650, 0x324650, 1, true)
    	ui.addTextArea(45, "", name, 600, 139, 52, 20, 0x5A7A8B, 0x5A7A8B, 1, true)
    	ui.addTextArea(46, "<p align='center'><V><a href='event:reset'>Reset", name, 601, 140, 50, 18, 0x324650, 0x324650, 1, true)
    	ui.addTextArea(47, "", name, 600, 173, 57, 20, 0x5A7A8B, 0x5A7A8B, 1, true)
    	ui.addTextArea(50, string.format("<p align='center'><V>Modo %s - %s ",modob,modo2b),nil, 235, 375, 300, 17, 0x324650, 0x324650, 1, true)
    	ui.addTextArea(16, "<p align='center'><V><a href='event:iniciarJogo'>GO", name, 368, 203, 38, 18, 0x324650, 0x324650, 1, true)
    	ui.addTextArea(57, "", name, 600, 207, 57, 25, 0x5A7A8B, 0x5A7A8B, 1, true)
    	ui.addTextArea(58, "<p align='center'><V><a href='event:volver'><font size='10'>4 Teams", name, 601, 208, 55, 23, 0x324650, 0x324650, 1, true)
	end
    ui.removeTextArea(59)
    ui.removeTextArea(60)
    ui.removeTextArea(53)
    ui.removeTextArea(51)
    ui.removeTextArea(54)
	for i,name in next,ADMINISTRADOR do
   		ui.addTextArea(56, "<p align='center'><V><a href='event:azart'><font size='12'>Azar", ADMINISTRADOR, 601, 246, 55, 18, 0x324650, 0x324650, 1, true)
	end
 
 
    verificarmodo2()
end

function eventPopupAnswer(popupId, playerName, answer)
	ratedMapsData[#ratedMapsData + 1] = answer == "yes"
end

function eventPlayerWon(player)
	if modob == "mix" and enableRateMaps then
		ui.addPopup(1, 1, "Do you like this map?\n( Te gusta este mapa? )", nil, 300, 100, 200, true)
	end


    if not isfirst then
        isfirst = true
        tfm.exec.setPlayerScore(player, 1, true)
        tfm.exec.setGameTime(3)
        if modo2b == "Deathmatch" then
            if puntos[player] >= WINS - 1 then
                gameRunning = false
                winTime = os.time()
                ui.addTextArea(29, string.format("<p align='center'><font size='37' color='#000000'>%s ganó\nLos otros son perdedores xdxdxd", player), nil, 3, 168, 800, 500, 0, 0, 0, true)
                ui.addTextArea(30, string.format("<p align='center'><font size='37'><font color='#cecece'><font color='#ff0000'>%s </font>ganó\nLos otros son perdedores xdxdxd", player), nil, 1, 170, 800, 500, 0, 0, 0, true)
				for i,name in next,ADMINISTRADOR do
               		ui.addTextArea(16, "<p align='center'><font color='#225066' size='18' face='Tw Cen MT Condensed'><a href='event:iniciarJogo'>DE NUEVO", name, 350, 270, 100, 20, 0xFFFFFF, 0xFFFFFF, 1, true)
				end
            end
            tfm.exec.setGameTime(3)
            puntos[player] = puntos[player]+1
            equipoc[player] = "0x115b17"
            displayScoreDeathmatch()
        end
        if modo2b == "normal" then
            if table.contains(teams[1], player) then
                tfm.exec.setGameTime(3)
 
                points[1] = points[1]+1
            elseif table.contains(teams[2], player) then
                tfm.exec.setGameTime(3)
 
                points[2] = points[2]+1
            elseif table.contains(teams[3], player) then
                tfm.exec.setGameTime(3)
 
                points[3] = points[3]+1
            elseif table.contains(teams[4], player) then
                tfm.exec.setGameTime(3)
 
                points[4] = points[4]+1
            else
                isfirst = false
            end
            winner = false
            if points[1] >= WINS then
                winner = 1
            elseif points[2] >= WINS then
                winner = 2
            elseif points[3] >= WINS then
                winner = 3
            elseif points[4] >= WINS then
                winner = 4
            end
            if winner then
                gameRunning = false
                winTime = os.time()
                local names = {
                    "Rojo",
                    "Azul",
                    "Verde",
                    "Amarillo",
                }
                ui.addTextArea(26, string.format("<p align='center'><font size='37' color='#000000'>El equipo %s Ganó\nLos otros son perdedores xdxdxd", names[winner]), nil, 0, 171, 800, 500, 0, 0, 0, true)
                ui.addTextArea(27, string.format("<p align='center'><font size='37' color='#000000'>El equipo %s Ganó\nLos otros son perdedores xdxdxd", names[winner]), nil, 1, 170, 800, 500, 0, 0, 0, true)
                ui.addTextArea(28, string.format("<p align='center'><font size='37' color='#000000'>El equipo %s Ganó\nLos otros son perdedores xdxdxd", names[winner]), nil, 2, 169, 800, 500, 0, 0, 0, true)
                ui.addTextArea(29, string.format("<p align='center'><font size='37' color='#000000'>El equipo %s Ganó\nLos otros son perdedores xdxdxd", names[winner]), nil, 3, 168, 800, 500, 0, 0, 0, true)
                ui.addTextArea(30, string.format("<p align='center'><font size='37'><font color='#cecece'>El equipo <font color='#%s'>%s</font> Ganó\nLos otros son perdedores xdxdxd", colors[winner], names[winner]), nil, 1, 170, 800, 500, 0, 0, 0, true)
				for i,name in next,ADMINISTRADOR do
                	ui.addTextArea(16, "<p align='center'><font color='#225066' size='18' face='Tw Cen MT Condensed'><a href='event:iniciarJogo'>REVANCHA", name, 350, 270, 100, 20, 0xFFFFFF, 0xFFFFFF, 1, true)
				end
            end
            displayScore()
        end
    end
end

local evLoop = 0

autojoin=true

function eventLoop(elapsed, remain)
 	if autojoin then
        for name in pairs(tfm.get.room.playerList) do
            eventChatCommand(name, "join")
        end
    end

	evLoop = evLoop + 500
    if gameRunning then
        remain = remain/1000
        if remain < 0 then
            remain = 100
            newMap()
        end
    else
        if winTime then
            if winTime > os.time()-30000 then
            else
                winTime = false
                ui.removeTextArea(26)
                ui.removeTextArea(27)
                ui.removeTextArea(28)
                ui.removeTextArea(29)
                ui.removeTextArea(30)
                displayTeams()
                teams = {
                    [1] = {},
                    [2] = {},
                    [3] = {},
                    [4] = {},
                }
                points = {
                    [1] = 0,
                    [2] = 0,
                    [3] = 0,
                    [4] = 0,
                }
                playersInGame = {}
            end
        end
    end
	for k, v in next, copyTable(freezePlayers) do
		v.time = v.time - .5
		tfm.exec.movePlayer(k, v.x, v.y)
		if v.time == 0 then
			freezePlayers[k] = nil
		end
	end
	
	if (evLoop >= 1000)  then
		
		if (evLoop >= 15000) and not banPurgeDone then
			for name in pairs(tfm.get.room.playerList) do
				if ban[name] then tfm.exec.killPlayer(name) end
			end
			banPurgeDone = true
		end
		if gameRunning then
			bulletDELAY = bulletDELAY - 1
		end
	end

	if bulletDELAY <= 0 then
		if loopCount == 0 and initializedPlayer then
			ammo()
		end
		loopCount = (loopCount + 1) % settings.ammoTicks
		bulletDELAY = bulletDelay
	end
end
function string.title(s)
    return string.gsub(s, "%a", function(c)
    return string.upper(c)
    end, 1)
end
function resetmostrarjugadoresdeathmatch()
    distanciax = 30
    distanciay = 80
    textarealugar = 302
    textareaid = 0
end
 
math.randomseed(os.time());
 
-- Create 4 teams:
for i = 1, 4 do
    teams[i] = {}
    points[i] = 0
end
 
function getTeamIndexWithLessPlayers()
    local teamIndex = 1;
    for i = 1, #teams do
        if (#teams[i] < #teams[teamIndex]) then
            teamIndex = i;
        end
    end
    return teamIndex;
end

local giveMeep = true

local hasClimbHax = {}
function eventChatCommand(player, command)
	if verifyAdmin(player) then
		if (command:sub(0,5) == "admin") then
			targetPlayer=command:sub(7)
			if tfm.get.room.playerList[targetPlayer] then
				if verifyAdmin(targetPlayer) then
					for i=1,rawlen(ADMINISTRADOR) do
						if ADMINISTRADOR[i] == targetPlayer then
							table.remove(ADMINISTRADOR,i)
							print(""..targetPlayer.." was removed from the administrators group.")
						end
					end
				else
					table.insert(ADMINISTRADOR,targetPlayer)
					print(""..targetPlayer.." now makes part of the administrators group.")
				end
			end
			displayAdmins()
		end
	end

    local c = { }
    string.gsub(command, "%S+", function(arg)
        c[#c + 1] = arg
    end)

if c[1]=="power" and verifyAdmin(player) then
    local name = c[2] or player
    if not tfm.get.room.playerList[name] then return end
	if ninja[name] then
		ninja[name] = not ninja[name]
		for keys, k in pairs({48, 49, 50, 51, 87}) do
			system.bindKeyboard(name, k, true, false)
		end

	else
		ninja[name] = true
		for keys, k in pairs({48, 49, 50, 51, 87}) do
			system.bindKeyboard(name, k, true, true)
		end

	end
end

if c[1]=="clear" and ninja[player] then clear() end

	args = string.split(command, " ")
    if verifyAdmin(player) then
        
        --[[if args[1] == "c" then
            local user = tostring(args[2]) or player
    
            if tfm.get.room.playerList[user] then
    
                if not hasClimbHax[user] then
                    hasClimbHax[user] = false
                end
    
                hasClimbHax[user] = not hasClimbHax[user]
                if user then
                  system.bindKeyboard(user, 71, true, hasClimbHax[user])
                end
            end
        end]]
        if args[1] == 'm' then
        	if args[2] == 'all' then
        		for playerName in next, tfm.get.room.playerList do
        			tfm.exec.giveMeep(playerName, giveMeep)
        			playerData[playerName].hasMeep = giveMeep
        		end
        		giveMeep = not giveMeep
        	else
        		if playerData[args[2]] then
        			playerData[args[2]].hasMeep = not playerData[args[2]].hasMeep
        			tfm.exec.giveMeep(args[2], playerData[args[2]].hasMeep)
        		end
        	end
        end
		
		if (args[1]== 'mapcode') then
			print(tfm.get.room.currentMap)
		end

		if (args[1] == 'conj') then
			local name = args[2] or player
			system.bindMouse(name, true);
			playersAllowedToConj[name] = not playersAllowedToConj[name];
		end
	
		if args[1] == 's' and args[3] then
			if args[3] == 'all' then
				for name, info in next, tfm.get.room.playerList do
					if not info.isDead then
						tfm.exec.changePlayerSize(name, tonumber(args[2]) or 1)
					end
				end
			else
				tfm.exec.changePlayerSize(args[3], tonumber(args[2]) or 1)
			end
		end
		if args[1] == 'p' and args[2] then
			args[3] = tonumber(args[3])

			local who = args[2]
			if who ~= "*" then
				who = who:lower():gsub("%a", string.upper, 1)
				if not who:find("#") then
					who = who .. "#0000"
				end

				if not args[3] then
					freezePlayers[who] = nil
				elseif tfm.get.room.playerList[who] then
					freezePlayers[who] = { x = tfm.get.room.playerList[who].x, y = tfm.get.room.playerList[who].y, time = args[3] }
				end
			else
				if not args[3] then
					freezePlayers = { }
				else
					for k, v in next, tfm.get.room.playerList do
						freezePlayers[k] = { x = v.x, y = v.y, time = args[3] }
					end
				end
			end
		end
		
		if args[1]=='ban' and args[2] then
			name = string.title(args[2])
			
			ban[name] = not ban[name]
			if ban[name] then tfm.exec.killPlayer(name) else tfm.exec.respawnPlayer(name) end
		end
	end
    if modo2b == "Deathmatch" then
        if args[1] == "puntaje" then
            resetmostrarjugadoresdeathmatch()
            ui.addTextArea(300, "<p align='center'><V><a href='event:cerrarpuntaje'>X", player, 30, 50, 30, 16, 0x324650, 0x324650, 1, true)
            ui.addTextArea(301, string.format("<p align='center'><V>Deathmatch a %s puntos",WINS), player, 80, 45, 180, 18, 0x324650, 0x000000, 1, true)
            for k,players in pairs(tfm.get.room.playerList) do
                if puntos[k] then
                    equipos[k] = k
                    playersInGame[k] = true
                    if textareaid >= 32 then
                    else
                        ui.addTextArea(textarealugar, string.format("<p align='center'><V>%s - %s",k,puntos[k]), player, distanciax, distanciay, 140, 18, 0x324650, 0x000000, 1, true)
                        distanciay = distanciay + 37
                        textareaid = textareaid + 1
                        textarealugar = textarealugar + 1
                        if textareaid == 8 then
                            distanciax = distanciax + 190
                            distanciay = 80
                            textareaid = 0
                        end
                    end
                end
            end
        end
    end
 
    --Make the player join a random team:
 
    if (command:match("^join") and not playersInGame[player] and not ban[player]) then
        player = string.title(player)
        if modoazar == "true" then
            if #teams[1] < #teams[2] then
                teamToJoin = 1
            else
                teamToJoin = 2
            end
            table.insert(teams[teamToJoin], player)
            playersInGame[player] = true
        else
            local teamToJoin = getTeamIndexWithLessPlayers();
            local lowest_score = -1
            for i=1, 4 do
                if points[i]<lowest_score or lowest_score==-1 then
                    lowest_score = points[i]
                    teamToJoin = i
                end
            end
            table.insert(teams[teamToJoin], player)
            playersInGame[player] = true
        end
    end
 
    if verifyAdmin(player) then
        if command:sub(1,1) == "k" then
            tfm.exec.killPlayer(command:sub(3))
        end
        args = string.split(command, " ")
        if args[1] == "team1" then
            if modo2b == "normal" then
                table.remove(args, 1)
                teams[1] = {}
                points[1] = 0
                for index, player in pairs(args) do
                    player = string.title(player)
                    table.insert(teams[1], player)
                    playersInGame[player] = true
                end
                if modoazar == "true" then
                    modoalazar()
                else
                    displayTeams()
                end
            end
        elseif args[1] == "team2" and modo2b == "normal" then
            table.remove(args, 1)
            teams[2] = {}
            points[2] = 0
            for index, player in pairs(args) do
                player = string.title(player)
                table.insert(teams[2], player)
                playersInGame[player] = true
            end
            if modoazar == "true" then
                modoalazar()
            else
                displayTeams()
            end
        elseif args[1] == "team3" and modo2b == "normal" then
            table.remove(args, 1)
            teams[3] = {}
            points[3] = 0
            for index, player in pairs(args) do
                player = string.title(player)
                table.insert(teams[3], player)
                playersInGame[player] = true
            end
            if modoazar == "true" then
                modoalazar()
            else
                displayTeams()
            end
        elseif args[1] == "team4" and modo2b == "normal" then
            table.remove(args, 1)
            teams[4] = {}
            points[4] = 0
            for index, player in pairs(args) do
                player = string.title(player)
                table.insert(teams[4], player)
                playersInGame[player] = true
            end
            if modoazar == "true" then
                modoalazar()
            else
                displayTeams()
            end
        elseif args[1] == "saltar" then
            newMap()
        elseif args[1] == "np" then
        	--If there's any bug with this new map system , report it to Ctmce#0000.
			for n in string.gmatch(command,"%s(@?%d+)") do
				queue[#queue+1] = n
			end
        elseif args[1] == "d" then
            if args[2] then
                WINS = tonumber(args[2])
                displayScore()
            end
        elseif args[1] == "añadir" and modo2b == "Deathmatch" then
            if args[2] then
                table.remove(args, 1)
                for index, player in pairs(args) do
                    equipos[player] = player
                    puntos[player] = 0
                    playersInGame[player] = true
                end
            end
        elseif args[1] == "añadir" and modo2b == "normal" then
            if args[2] and args[3] then
                if args[2] == "team1" and modo2b == "normal" then
                    table.remove(args, 1)
                    table.remove(args, 1)
                    for index, player in pairs(args) do
                        player = string.title(player)
                        table.insert(teams[1], player)
                        playersInGame[player] = true
                    end
                end
                if args[2] == "team2" and modo2b == "normal" then
                    table.remove(args, 1)
                    table.remove(args, 1)
                    for index, player in pairs(args, 3) do
                        player = string.title(player)
                        table.insert(teams[2], player)
                        playersInGame[player] = true
                    end
                end
                if args[2] == "team3" and modo2b == "normal" then
                    table.remove(args, 1)
                    table.remove(args, 1)
                    for index, player in pairs(args) do
                        player = string.title(player)
                        table.insert(teams[3], player)
                        playersInGame[player] = true
                    end
                end
                if args[2] == "team4" and modo2b == "normal" then
                    table.remove(args, 1)
                    table.remove(args, 1)
                    for index, player in pairs(args) do
                        player = string.title(player)
                        table.insert(teams[4], player)
                        playersInGame[player] = true
                    end
                end
            end
        elseif args[1] == "quitar" then
            if args[2] then
                for index, player in pairs(args) do
                    player = string.title(player)
                    playersInGame[player] = false
                    for i=1, 4 do
                        for n=1, #teams[i] do
                            if teams[i][n] == player then
                                table.remove(teams[i], n)
                            end
                        end
                    end
                end
            end
        elseif args[1] == "reset" then
            teams[1] = {}
            points[1] = 0
            teams[2] = {}
            points[2] = 0
            teams[3] = {}
            points[3] = 0
            teams[4] = {}
            points[4] = 0
            equipos = {}
            puntos = {}
            modob = "racing"
            modo = "bootcamp"
            modo2 = "Deathmatch"
            modo2b = "normal"
            displayTeams()
 
 
        elseif args[1] == "puntos" and modo2b == "normal" then
            if args[2] and args[3] then
                local team = tonumber(args[2]:match("team(%d+)") or 0)
                if team > 0 and team < 5 then
                    local newScore = tonumber(args[3]) or points[team]
                    points[team] = newScore
                    displayScore()
                end
            end
        elseif args[1] == "pausa" then
            gameRunning = not gameRunning
            if not gameRunning then
                ui.addTextArea(90, "", nil, 235, 200, 302, 22, 0x324650, 0x5A7A8B, 1, true)
                ui.addTextArea(91, "<p align='center'><V> Juego pausado  ", nil, 235, 200, 300, 20, 0x324650, 0x324650, 1, true)
                tfm.exec.disableAutoTimeLeft(true)
            else
                ui.removeTextArea(90)
                ui.removeTextArea(91)
                tfm.exec.disableAutoTimeLeft(false)
            end
        elseif args[1] == "antleve" then
            local antileveMaps = mapasAntLeve[math.random(#mapasAntLeve)]
           -- if gameRunning then
                tfm.exec.newGame(antileveMaps)
           -- end
		elseif args[1] == "snowball" and modob == "mix" then
            if args[2] then
				table.remove(args, 1)
                for index, playerName in next, args do
                    player = string.title(playerName)
					initPlayer(player)
					initializedPlayer = true
				end
            end
		end
	end
end

function eventNewGame()
	for k,v in next,tfm.get.room.playerList do
		if k:find("*") then tfm.exec.killPlayer(k) end
	end
	for playerName, Data in next, playerData do
		tfm.exec.giveMeep(playerName, Data.hasMeep)
	end

	freezePlayers = { }
	if modob == "mix" and enableRateMaps then
		ui.addPopup(1, 1, " ", nil, -1000, -1000, 0, false)
		local dislikes = 0
		for _, data in next, ratedMapsData do
			if not data then
				dislikes = dislikes + 1
			end
		end
		ratedMapsData = {}
		mapToRate = tfm.get.room.xmlMapInfo.mapCode
	end
    if gameRunning then
        if modo2b == "normal" then
            isfirst = false
            for i, p in pairs(teams[1]) do
                tfm.exec.setNameColor(p, "0x"..colors[1])
            end
            for i, p in pairs(teams[2]) do
                tfm.exec.setNameColor(p, "0x"..colors[2])
            end
            for i, p in pairs(teams[3]) do
                tfm.exec.setNameColor(p, "0x"..colors[3])
            end
            for i, p in pairs(teams[4]) do
                tfm.exec.setNameColor(p, "0x"..colors[4])
            end
            displayScore()
        end
        if modo2b == "Deathmatch" then
            isfirst = false
            for k,players in pairs(tfm.get.room.playerList) do
                tfm.exec.setNameColor(k, "0xff0000")
                equipoc[k] = "0x324650"
            end
            displayScore()
        end
    end
	ui.setMapName("")
	
	-- New buttons here, by Seniru, change button styles here if you want
	for id,name in next,ADMINISTRADOR do
		ui.addTextArea(70, "<a href='event:rt'>rt</a>", name, 0, -30, 50, 30, nil, nil, 1, true)
		ui.addTextArea(71, "<a href='event:respawn'>Respawn: " .. (respawn and "on" or "off") .. "</a>", name, 60, -30, 50, 30, nil, nil, 1, true)
		ui.addTextArea(72, "<a href='event:skip'>Skip</a>", name, 120, -30, 50, 30, nil, nil, 1, true)
	end
end

function displayScore()
    if modo2b == "normal" then
        if modoazar == "true" then
            ui.addTextArea(25, string.format("<p align='center'><font size='20'><font color='#%s'>%s<N> x <font color='#%s'>%s <N> / <font color='#111111'>%s", colors[1], points[1], colors[2], points[2], WINS), nil, 0, 22, 800, 30, 0, 0, 0, true)
        end
        if modoazar == "false" then
            ui.addTextArea(25, string.format("<p align='center'><font size='20'><font color='#%s'>%s<N> x <font color='#%s'>%s <N> x <font color='#%s'>%s <N> x <font color='#%s'>%s <N> / <font color='#111111'>%s", colors[1], points[1], colors[2], points[2], colors[3], points[3], colors[4], points[4], WINS), nil, 0, 22, 800, 30, 0, 0, 0, true)
        end
    end
end
function displayScoreDeathmatch()
    resetmostrarjugadoresdeathmatch()
    ui.addTextArea(300, string.format("<p align='center'><V>Deathmatch a %s puntos",WINS), nil, 80, 45, 180, 18, 0x324650, 0x000000, 1, true)
    for k,players in pairs(tfm.get.room.playerList) do
        if puntos[k] then
            equipos[k] = k
            playersInGame[k] = true
            if textareaid >= 32 then
            else
                ui.addTextArea(textarealugar, string.format("<p align='center'><V>%s - %s",k,puntos[k]), nil, distanciax, distanciay, 140, 18, equipoc[k], 0x000000, 1, true)
                distanciay = distanciay + 37
                textareaid = textareaid + 1
                textarealugar = textarealugar + 1
                if textareaid == 8 then
                    distanciax = distanciax + 190
                    distanciay = 80
                    textareaid = 0
                end
            end
        end
    end
end

function borrarScoreDeathmatch()
    for i = 300, 334 do
        ui.removeTextArea(i)
    end
end
function tableSizeKey(t,i)
	local counter = 0
	for k,v in pairs(t) do
		if k ~= i then
			counter = counter + 1
		end
	end
	return counter
end
function table_removeKey(t,i)
	local tClone = {}
	for k,v in pairs(t) do
		if k ~= i then
			tClone[k] = v
		end
	end
	return tClone
end
function displayTeams()
    borrarScoreDeathmatch()
    modoazar = "false"
    ui.addTextArea(38, "", nil, 235, 30, 302, 22, 0x324650, 0x5A7A8B, 1, true)
	admin_string = "";
	for id,name in next,ADMINISTRADOR do
		if id == 1 then
			admin_string = admin_string..name;
		else
			admin_string = admin_string..", "..name;
		end
	end
	ui.addTextArea(37, "<p align='center'><V>Administrador(es): "..admin_string, nil, 135, 30, 500, 20, 0x324650, 0x324650, 1, true)
    ui.addTextArea(2, "", nil, 0, 71, 800, 290, 0x0E1417, 0x0E1417, 1, true)
    ui.addTextArea(4, "", nil, 57, 79, 142, 22, 0x324650, 0x5A7A8B, 1, true)
    ui.addTextArea(5, "<p align='center'><V>Team 1", nil, 58, 80, 140, 20, 0x324650, 0x324650, 1, true)
    ui.addTextArea(6, "", nil, 227, 79, 142, 22, 0x324650, 0x5A7A8B, 1, true)
    ui.addTextArea(7, "<p align='center'><V>Team 2", nil, 228, 80, 140, 20, 0x324650, 0x324650, 1, true)
    ui.addTextArea(8, "", nil, 417, 79, 142, 22, 0x324650, 0x5A7A8B, 1, true)
    ui.addTextArea(9, "<p align='center'><V>Team 3", nil, 418, 80, 140, 20, 0x324650, 0x324650, 1, true)
    ui.addTextArea(10, "", nil, 587, 79, 142, 22, 0x324650, 0x5A7A8B, 1, true)
    ui.addTextArea(11, "<p align='center'><V>Team 4", nil, 588, 80, 140, 20, 0x324650, 0x324650, 1, true)
    ui.addTextArea(12, "<p align='center'><font color='#5A7A8B'>|</font>", nil, 210, 102, 140, 200, 0, 0, 0, true)
    ui.addTextArea(39, "<p align='center'><font color='#5A7A8B'>|</font>", nil, 450, 102, 140, 200, 0, 0, 0, true)
    ui.addTextArea(40, "", nil, 59, 120, 140, 200, 0x5A7A8B, 0x5A7A8B, 1, true)
    ui.addTextArea(31, "<p align='center'><font color='#"..colors[1].."'>"..table.concat(teams[1], "\n"), nil, 60, 121, 138, 198, 0x324650, 0x324650, 1, true)
    ui.addTextArea(32, "", nil, 419, 120, 140, 200, 0x5A7A8B, 0x5A7A8B, 1, true)
    ui.addTextArea(33, "<p align='center'><font color='#"..colors[3].."'>"..table.concat(teams[3], "\n"), nil, 420, 121, 138, 198, 0x324650, 0x324650, 1, true)
    ui.addTextArea(34, "", nil, 589, 120, 140, 200, 0x5A7A8B, 0x5A7A8B, 1, true)
    ui.addTextArea(35, "<p align='center'><font color='#"..colors[4].."'>"..table.concat(teams[4], "\n"), nil, 590, 121, 138, 198, 0x324650, 0x324650, 1, true)
    ui.addTextArea(36, "", nil, 229, 120, 140, 200, 0x5A7A8B, 0x5A7A8B, 1, true)
    ui.addTextArea(13, "<p align='center'><font color='#"..colors[2].."'>"..table.concat(teams[2], "\n"), nil, 230, 121, 138, 198, 0x324650, 0x324650, 1, true)
    ui.addTextArea(14, "<p align='center'><font color='#5A7A8B'>____         ____</font>", nil, 325, 197, 140, 200, 0, 0, 0, true)
    ui.addTextArea(15, "", nil, 374, 202, 40, 20, 0x5A7A8B, 0x5A7A8B, 1, true)
    ui.addTextArea(16, "<p align='center'><V>VS", nil, 375, 203, 38, 18, 0x324650, 0x324650, 1, true)
	for id,name in next,ADMINISTRADOR do
   		ui.addTextArea(42, "", name, 749, 81, 40, 20, 0x5A7A8B, 0x5A7A8B, 1, true)
   		ui.addTextArea(41, "<p align='center'><V><a href='event:salir'>X", name, 750, 82, 38, 18, 0x324650, 0x324650, 1, true)
    	ui.addTextArea(45, "", name, 744, 139, 52, 20, 0x5A7A8B, 0x5A7A8B, 1, true)
    	ui.addTextArea(46, "<p align='center'><V><a href='event:reset'>Reset", name, 745, 140, 50, 18, 0x324650, 0x324650, 1, true)
    	ui.addTextArea(47, "", name, 741, 173, 57, 20, 0x5A7A8B, 0x5A7A8B, 1, true)
    	ui.addTextArea(54, "", name, 741, 209, 57, 20, 0x5A7A8B, 0x5A7A8B, 1, true)
    	if modo2 == "Deathmatch" then
       	 ui.addTextArea(51, "<p align='center'><V><a href='event:Deathmatch'><font size='8'>"..modo2, name, 742, 210, 55, 18, 0x324650, 0x324650, 1, true)
    	end
    	verificarmodo()
    	ui.addTextArea(53, "", name, 741, 245, 57, 20, 0x5A7A8B, 0x5A7A8B, 1, true)
    	ui.addTextArea(56, "<p align='center'><V><a href='event:llenar'><font size='12'>Llenar", name, 742, 246, 55, 18, 0x324650, 0x324650, 1, true)
    	ui.addTextArea(16, "<p align='center'><V><a href='event:iniciarJogo'>GO", name, 375, 203, 38, 18, 0x324650, 0x324650, 1, true)
    	ui.addTextArea(57, "", name, 741, 281, 57, 25, 0x5A7A8B, 0x5A7A8B, 1, true)
    	ui.addTextArea(58, "<p align='center'><V><a href='event:azart'><font size='12'>", name, 742, 282, 55, 23, 0x324650, 0x324650, 1, true)
    	ui.addTextArea(59, "<p align='center'><V><a href='event:azart'><font size='12'>teams", name, 742, 290, 55, 23, 0x000000, 0x000000, 1, true)
    	ui.addTextArea(60, "<p align='center'><V><a href='event:azart'><font size='12'>Azar 2", name, 742, 278, 55, 23, 0x000000, 0x000000, 1, true)
	end
end
function verificarmodo()
    ui.addTextArea(50, string.format("<p align='center'><V>Modo %s - %s ",modob,modo2b),nil, 235, 375, 300, 17, 0x324650, 0x324650, 1, true)
	for id,name in next,ADMINISTRADOR do
   		if modo2 == "normal" then
        	ui.addTextArea(51, "<p align='center'><V><a href='event:normal'><font size='8'>"..modo2, name, 742, 210, 55, 18, 0x324650, 0x324650, 1, true)
   		end
    	if modo == "bootcamp" then
        	ui.addTextArea(48, "<p align='center'><V><a href='event:bootcamp'><font size='9'>"..modo, name, 742, 174, 55, 18, 0x324650, 0x324650, 1, true)
    	end
    	if modo == "racing" then
        	ui.addTextArea(48, "<p align='center'><V><a href='event:racing'><font size='9'>"..modo, name, 742, 174, 55, 18, 0x324650, 0x324650, 1, true)
    	end
    	if modo == "mix" then
        	ui.addTextArea(48, "<p align='center'><V><a href='event:mix'><font size='9'>P1 maps", name, 742, 174, 55, 18, 0x324650, 0x324650, 1, true)
    	end
    	if modo == "burlas" then
        	ui.addTextArea(48, "<p align='center'><V><a href='event:burlas'><font size='9'>Burla maps", name, 742, 174, 55, 18, 0x324650, 0x324650, 1, true)
    	end
	end
end

function eventNewPlayer(name)
	for keys, k in pairs({17, 38, 39, 37, 75, 74, 88, 90, 86, 66, 67, 80, 78, 77}) do
		system.bindKeyboard(name, k, true, true)
	end
	playerData[name] = {hasMeep = false}
	if ban[name] then tfm.exec.killPlayer(name) end
end
table.foreach(tfm.get.room.playerList, eventNewPlayer)

objects={}
function clear()
for k,v in pairs(tfm.get.room.objectList) do
table.insert(objects,k)
end
for i,object in ipairs(objects) do
tfm.exec.removeObject(object)
end
end

function contarjugadores()
    local players=0
    function eventNewPlayer(name)--Cuando un jugador entre a la sala...
    	if not playerData[name] then
    		playerData[name] = {hasMeep = false}
    	end
		for keys, k in pairs({48, 49, 50, 51, 87}) do
			system.bindKeyboard(god, k, true, true)
		end
        players=players+1--Sumamos 1 a nuestra tabla
    end
    function eventPlayerLeft(name)--Cuando un jugador salga de la sala...
        players=players-1--Restamos 1 a nuestra tabla
		if verifyAdmin(name) then
			for i=1,rawlen(ADMINISTRADOR) do
				if ADMINISTRADOR[i] == targetPlayer then
					table.remove(ADMINISTRADOR,i)
					print(""..targetPlayer.." was removed from the administrators group.")
				end
			end
			if rawlen(ADMINISTRADOR) == 0 then
				print("<R>The code cannot continue running without administrators.")
				system.exit()
			end
		end
    end
    for name in pairs(tfm.get.room.playerList) do--Por cada jugador que esté en la sala...
        eventNewPlayer(name)--Le ejecutamos la función eventNewPlayer
    end
end
function eventTextAreaCallback(id, player, callback)
	if verifyAdmin(player) then
    if callback == 'iniciarJogo' then
    	for n,p in next ,tfm.get.room.playerList do
    		tfm.exec.setPlayerScore(n, 0, false)
    	end
        gameRunning = true
        for i = 1, 20 do
            ui.removeTextArea(i)
        end
        for i = 26, 60 do
            ui.removeTextArea(i)
        end
        borrarScoreDeathmatch()
        newMap()
        if modo2b == "normal" then
            points[1] = 0
            points[2] = 0
            points[3] = 0
            points[4] = 0
            displayScore()
        end
        if modo2b == "Deathmatch" then
            for k,v in pairs(tfm.get.room.playerList) do
                puntos[k] = 0
            end
        end
    end
    if callback == 'salir' then
        system.exit()
    end
 
    if callback == 'llenar' then
        nteam = 1
        azar = {}
        playersInGame = {}
 
        teams = {
            [1] = {},
            [2] = {},
            [3] = {},
            [4] = {},
        }
        contarjugadores()
        for k,players in pairs(tfm.get.room.playerList) do
            if nteam > 4 then
                nteam = 1
            end
            table.insert(teams[nteam], k)
            playersInGame[k] = true
            nteam = nteam + 1
            displayTeams()
        end
    end
 
	if callback == 'respawn' then
		respawn = not respawn
		ui.updateTextArea(71, "<a href='event:respawn'>Respawn: " .. (respawn and "on" or "off") .. "</a>")
	end

	if callback == 'rt' then
		tfm.exec.newGame(last_map)
		--rt = not rt
		--ui.updateTextArea(70, "<a href='event:rt'>rt: " .. (rt and "on" or "off") .. "</a>")
	end

	if callback == 'skip' then
		newMap()
	end
 
    if callback == 'reset' then
        teams[1] = {}
        points[1] = 0
        teams[2] = {}
        points[2] = 0
        teams[3] = {}
        points[3] = 0
        teams[4] = {}
        points[4] = 0
        equipos = {}
        puntos = {}
        modob = "racing"
        modo = "bootcamp"
        modo2 = "Deathmatch"
        modo2b = "normal"
        displayTeams()
 
    end
    if callback == 'bootcamp' then
        tiempo = 150
        modob = "bootcamp"
        modo = "mix"
        verificarmodo()
        maps = mapasbootcamp
    end
	if callback == 'burlas' then
        tiempo = 60
        modob = "burlas"
        modo = "bootcamp"
        verificarmodo()
        maps = mapasburlas
    end
    if callback == 'racing' then
 
        tiempo = 60
        modob = "racing"
        modo = "burlas"
        verificarmodo()
        maps = mapasracing
    end
    if callback == 'mix' then
        tiempo = 90
        modob = "mix"
        modo = "racing"
        verificarmodo()
        maps = mapasmix
    end
    if callback == 'Deathmatch' then
        modo2b = "Deathmatch"
        modo2 = "normal"
        displayTeams()
        for i = 4, 15 do
            ui.removeTextArea(i)
        end
        for i = 31, 36 do
            ui.removeTextArea(i)
        end
        for i = 39, 40 do
            ui.removeTextArea(i)
        end
        ui.removeTextArea(53)
        ui.removeTextArea(56)
        contarjugadores()
        for k,players in pairs(tfm.get.room.playerList) do
            equipos[k] = k
            puntos[k] = 0
            equipoc[k] = "0x324650"
            playersInGame[k] = true
            if textareaid >= 32 then
            else
                ui.addTextArea(textarealugar, "<p align='center'><V>"..k, nil, distanciax, distanciay, 140, 18, 0x324650, 0x324650, 1, true)
                distanciay = distanciay + 37
                textareaid = textareaid + 1
                textarealugar = textarealugar + 1
                if textareaid == 8 then
                    distanciax = distanciax + 190
                    distanciay = 80
                    textareaid = 0
                end
				for id,name in next,ADMINISTRADOR do
                	ui.addTextArea(16, "<p align='center'><V><a href='event:iniciarJogo'>GO", name, 375, 203, 38, 18, 0x324650, 0x324650, 1, true)
				end
            end
        end
    end
    if callback == 'normal' then
        modo2b = "normal"
        modo2 = "Deathmatch"
        resetmostrarjugadoresdeathmatch()
        displayTeams()
    end
    if callback == 'cerrarpuntaje' then
        borrarScoreDeathmatch()
    end
    if callback == 'azart' then
        totales = 0
        totales2 = 0
        jugando = {}
        totaljugando = 1
        jugandoposicion = {}
        playersInGame = {}
        teams[1] = {}
        teams[2] = {}
        teams[3] = {}
        teams[4] = {}
        alazar()
        borrarScoreDeathmatch()
        modoazar = "true"
        modoalazar()
    end
    if callback == 'volver' then
        totales = 0
        totales2 = 0
        jugando = {}
        totaljugando = 1
        jugandoposicion = {}
        playersInGame = {}
        teams[1] = {}
        teams[2] = {}
        teams[3] = {}
        teams[4] = {}
        displayTeams()
    end
    if callback == 'bootcamp2' then
        tiempo = 150
        modob = "bootcamp"
        modo = "burlas"
        verificarmodo2()
        maps = mapasbootcamp
    end
    if callback == 'racing2' then
 
        tiempo = 60
        modob = "racing"
        modo = "bootcamp"
        verificarmodo2()
        maps = mapasracing
    end
    if callback == 'mix2' then
        tiempo = 90
        modob = "mix"
        modo = "racing"
        verificarmodo2()
        maps = mapasmix
	end
    if callback == 'burlas2' then
        tiempo = 60
        modob = "burlas"
        modo = "mix"
        verificarmodo2()
        maps = mapasburlas
    end
	end
end
function alazar()
    t = 0
    for k,v in pairs(tfm.get.room.playerList) do
        if t == 1 then
            table.insert(teams[2], k)
            playersInGame[k] = true
            t = 0
        elseif t == 0 then
            table.insert(teams[1], k)
            playersInGame[k] = true
            t = 1
        end
    end
end
 
 
 
function verificarmodo2()
    ui.addTextArea(50, string.format("<p align='center'><V>Modo %s - %s ",modob,modo2b),nil, 235, 375, 300, 17, 0x324650, 0x324650, 1, true)
	for id,name in next,ADMINISTRADOR do
   		if modo == "bootcamp" then
        	ui.addTextArea(48, "<p align='center'><V><a href='event:bootcamp2'><font size='9'>"..modo, name, 601, 174, 55, 18, 0x324650, 0x324650, 1, true)
    	end
    	if modo == "racing" then
        	ui.addTextArea(48, "<p align='center'><V><a href='event:racing2'><font size='9'>"..modo, name, 601, 174, 55, 18, 0x324650, 0x324650, 1, true)
    	end
    	if modo == "mix" then
        	ui.addTextArea(48, "<p align='center'><V><a href='event:mix2'><font size='9'>"..modo, name, 601, 174, 55, 18, 0x324650, 0x324650, 1, true)
    	end
    	if modo == "burlas" then
        	ui.addTextArea(48, "<p align='center'><V><a href='event:burlas2'><font size='9'>"..modo, name, 601, 174, 55, 18, 0x324650, 0x324650, 1, true)
    	end
	end
end
function string.split(s, pattern, n)
    local st = {}
    for sb in string.gmatch(s, "[^"..pattern.."]+") do
        if not n or n > -1 then
            table.insert(st,sb)
        else
            st[#st] = st[#st]..pattern..sb
        end
        n = n and n-1 or false
    end
    return st
end
function table.contains(tableT, element)
    for _, value in pairs(tableT) do
        if value == element then
            return true
        end
    end
    return false
end
function eventPlayerDied(player)
	if respawn then
		return tfm.exec.respawnPlayer(player)
	end
    local alive = 0
    for k,v in pairs(tfm.get.room.playerList) do
        if not v.isDead then
            alive = alive+1
        end
    end
    if alive == 0 then
        newMap()
    end
end
displayTeams()

doll = "Carlosholos2#0000"

function eventKeyboard(name, key, down, x, y)
	if ninja[name] then
		if key == 17 then
			keyPressed[name][17] = down
		elseif key == 38 then
			--tfm.exec.movePlayer(name, 0, 0, false, 0, -100, false)
		elseif key == 39 then
			--tfm.exec.movePlayer(name, 0, 0, false, 80, 0, false)
		elseif key == 37 then
			--tfm.exec.movePlayer(name, 0, 0, false, -80, 0, false)
		elseif key == 75 then
			--tfm.exec.movePlayer(name, 0, 0, true, 20, nil, false)
		elseif key == 74 then
			--tfm.exec.movePlayer(name, 0, 0, true, -20, nil, false)

		-- powers
		elseif key == 88 then
		tfm.exec.addShamanObject(23,x+25,y,-90,50,0,false)
		elseif key == 90 then
		tfm.exec.addShamanObject(23,x-25,y,90,-50,0,false)
		elseif key == 66 then
		tfm.exec.addShamanObject(104,x+1,y,0,0,0,false)
		elseif key == 67 then
		tfm.exec.explosion(x,y,0.5,100,false)
		tfm.exec.displayParticle(10,x,y,0,0,0,0)
		elseif key == 80 then
		tfm.exec.explosion(x,y,50,250,false)
		tfm.exec.displayParticle(10,x,y,0,0,0,0)
		tfm.exec.displayParticle(10,x,y-15,0,0,0,0)
		tfm.exec.displayParticle(10,x-10,y-8,0,0,0,0)
		elseif key == 78 then
		tfm.exec.addShamanObject(26,x,y,0,0,0,false)
		elseif key == 77 then
		tfm.exec.addShamanObject(27,x,y,0,0,0,false)
		elseif key == 86 then
		tfm.exec.addPhysicObject(1,x,y+10,{
		type=0,
		restitution=0.2,
		friction=0.3,
		width=50,
		height=10,
		miceCollision=true
		})
		end
    end
    if verifyAdmin(name) then
        if key == 48 then
            tfm.exec.movePlayer(doll, 0, 0, true, nil, -15, true)
        elseif key == 49 then
            -- tfm.exec.movePlayer(doll, 0, 0, true, nil, -60, true)
        elseif key == 50 then
            tfm.exec.movePlayer(doll, 0, 0, true, -40, nil, false) 
        elseif key == 51 then
            tfm.exec.movePlayer(doll, 0, 0, true, 40, nil, false)
        elseif key == 71 then
            tfm.exec.movePlayer(doll, 0, 0, true, nil, -50, false)
        end
    end
end

function eventMouse(name, x, y)
	if (playersAllowedToConj[name]) then
		tfm.exec.addConjuration(x/10, y/10, 5000);
	end
	
	
	local player = choosenPlayer[name]
	if ninja[name] then
		if keyPressed[name][17] then
			tfm.exec.movePlayer(name, x, y, false, 0, 0, true)
		end
	end
	if player and player.ammo > 0 then
	-- remove one ammo
		ui.removeTextArea(player.ammo * 2 - 1, name)
		ui.removeTextArea(player.ammo * 2, name)
		player.ammo = player.ammo - 1
	 
		local roomPlayer = tfm.get.room.playerList[name]
		 
		-- calculate angle between player and click
		local dx = x - roomPlayer.x
		local dy = y - roomPlayer.y
		local angle = math.atan2(dy, dx)
		 
		-- calculate speeds to direct arrow and always have the same total speed
		local vx = math.cos(angle)
		local vy = math.sin(angle)
		 
		-- spawn arrow and add to queue
		queue.insert(objects, tfm.exec.addShamanObject(34, roomPlayer.x + 20 * vx, roomPlayer.y + 20 * vy, angle*180/math.pi, settings.force * vx, settings.force * vy, false))
		 
		local recoil = -vx * settings.recoil
	-- workaround to avoid argument exception bug
		if recoil <= -1 or recoil >= 1 then
			tfm.exec.movePlayer(name, 0, 0, true, recoil, 0, true)
		end
	 
	-- remove first arrow when there are too many
		if objects.size > settings.maxObjects then
			tfm.exec.removeObject(queue.remove(objects))
		end
	end
end



function initPlayer(name)
	choosenPlayer[name] = {ammo = 0}
	ui.addTextArea(0, "", name, 10, 30, settings.ammo * 15, 20, 0x010101, 0x000000, 0.5)
	system.bindMouse(name, true)
end


function ammo()
	if initializedPlayer then
		for name, player in pairs(choosenPlayer) do
		local ammo = player.ammo
			if ammo < settings.ammo then
				player.ammo = ammo + 1
				ui.addTextArea(ammo * 2 + 1, "", name, 14 + ammo * 15, 39, 3, 3, 0x990000, 0x990000, 1)
				ui.addTextArea(ammo * 2 + 2, "", name, 15 + ammo * 15, 40, 1, 1, 0xff0000, 0xcc0000, 1)
			end
		end	
	end
end

function queue.new()
	return {
	tail = nil,
	head = nil,
	size = 0
	}
end

function queue.insert(self, v)
	local i = {
	value = v,
	next = nil
	}
	if self.tail and self.head then
		self.tail.next = i
	else
		self.head = i
	end
	self.tail = i
	self.size = self.size + 1
end

function queue.peek(self)
	if self.head then
		return self.head.value
	else
		error("queue is empty")
	end
end

function queue.remove(self)
	local r = queue.peek(self)
	self.head = self.head.next
	if not self.head then
		tail = nil
	end
	self.size = self.size - 1
	return r
end

objects = queue.new()
